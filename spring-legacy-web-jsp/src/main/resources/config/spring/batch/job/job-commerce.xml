<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
           http://www.springframework.org/schema/batch
           http://www.springframework.org/schema/batch/spring-batch-3.0.xsd">
           
           
	<batch:job id="baseJob" abstract="true">
		<batch:listeners>
			<batch:listener ref="baseJobExecutionListener" />
		</batch:listeners>
	</batch:job>
	
	<bean id="baseJobExecutionListener" class="io.github.joyoungc.bat.BaseJobExecutionListener"> 
		<property name="exceptionHandlingHelper" ref="exceptionHandlingHelper"/>
	</bean>
           

	<!-- ================================================================= -->
	<!-- @Desc Commerce 관련 job 설정 xml -->
	<!-- @author BD 정조영 (2016.08.18) -->
	<!-- ================================================================= -->

	<!-- 주문 상태 코드 변경 배치 Job -->
	<batch:job id="commerceOrderJob">
		<batch:step id="commerceOrderStep1">
			<batch:tasklet>
				<batch:chunk reader="commerceOrderItemReader" processor="commerceOrderItemProccessor" writer="commerceOrderItemWriter" commit-interval="10">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<!-- 주문 상태를 변경할 Data 조회 -->
	<bean id="commerceOrderItemReader" class="org.mybatis.spring.batch.MyBatisPagingItemReader" scope="step">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
		<property name="queryId" value="io.github.joyoungc.bat.commerce.dao.impl.CommerceDaoImpl.selectConfirmedOrderToComplete" />
		<property name="parameterValues">
			<map>
				<entry key="orderStatusCodeComplete" value="#{jobParameters['orderStatusCodeComplete']}" />
				<entry key="orderStatusCodeFail" value="#{jobParameters['orderStatusCodeFail']}" />
				<entry key="orderStatusCodeReturn" value="#{jobParameters['orderStatusCodeReturn']}" />
			</map>
		</property>
		<property name="pageSize" value="10"></property>
	</bean>

	<!-- 주문 상태 변경 -->
	<bean id="commerceOrderItemWriter" class="org.mybatis.spring.batch.MyBatisBatchItemWriter" scope="step">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
		<property name="assertUpdates" value="false" />
		<property name="statementId" value="io.github.joyoungc.bat.commerce.dao.impl.CommerceDaoImpl.updateConfirmedOrder" />
	</bean>
	
	<!-- ================================================================= -->
	<!-- @Desc Commerce 상품 리스트 업데이트 job 설정 xml -->
	<!-- @author BD 정조영 (2017.04.28) -->
	<!-- ================================================================= -->	
	<batch:job id="commerceProductJob" parent="baseJob">
	
		<!-- Step 1) API를 통해 상품 리스트를 가지고 온후 저장할 데이터를 추출한다. -->
		<batch:step id="commerceProductStep1" next="commerceProductStep2">
			<batch:tasklet ref="commerceDataInterfaceTasklet" />
		</batch:step>
		
		<!-- Step 2) 저장할 데이터를 읽어들인 후 DB에 insert 한다.  -->
 		<batch:step id="commerceProductStep2">
			<batch:tasklet>
				<batch:chunk reader="commerceProductItemReader" writer="commerceProductItemWriter" commit-interval="10">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		
	</batch:job>
	
	<!-- 주문 상태 변경 -->
	<bean id="commerceProductItemWriter" class="org.mybatis.spring.batch.MyBatisBatchItemWriter" scope="step">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
		<property name="assertUpdates" value="false" />
		<property name="statementId" value="io.github.joyoungc.bat.commerce.dao.impl.CommerceDaoImpl.createOpenMarketProduct" />
	</bean>	
	
	
	<!-- 등록된 상품에 대한 Data 조회 -->
<!-- 	<bean id="commerceProductItemReader" class="org.mybatis.spring.batch.MyBatisPagingItemReader" scope="step">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
		<property name="queryId" value="io.github.joyoungc.bat.commerce.dao.impl.CommerceDaoImpl.selectOpenMarketProduct" />
		<property name="parameterValues">
			<map>
				<entry key="productSellBaseDatetime" value="#{jobParameters['productSellBaseDatetime']}" />
			</map>
		</property>
		<property name="pageSize" value="100"></property>
	</bean> -->
	
	

</beans>